def prim(graph):
    graph = {node: neighbors for node, neighbors in graph.adjacency()}
    result = []
    start_vertex = next(iter(graph))
    visited = {start_vertex}
    edges = [(weight_dict['weight'], start_vertex, to) for to, weight_dict in graph[start_vertex].items()]

    while len(visited) < len(graph):
        min_edge = min(edges)
        weight, frm, to = min_edge
        edges.remove(min_edge)
        if to not in visited:
            visited.add(to)
            result.append((frm, to, weight))
            for next_to, next_weight_dict in graph[to].items():
                if next_to not in visited:
                    next_weight = next_weight_dict['weight']
                    edges.append((next_weight, to, next_to))

    total_weight = sum(weight for _, _, weight in result)
    return result, total_weight
